import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ADMIN_IDS = [7212288453]

channels_to_show = [
    ("https://t.me/+VYwk8CNxYRtkNTQy", "–ö–∞–Ω–∞–ª‚ÄØ1"),
    ("https://t.me/+DKL9QMs_l8RkMzRi", "–ö–∞–Ω–∞–ª‚ÄØ2"),
    ("https://t.me/+q73NJr1o6G81MGJi", "–ö–∞–Ω–∞–ª‚ÄØ3")
]

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
users_file = "users.json"

def load_users():
    try:
        with open(users_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_users(data):
    with open(users_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def add_user(user_id):
    users = load_users()
    uid = str(user_id)
    if uid not in users:
        users[uid] = {"balance": 50, "confirmed": False}
        save_users(users)

def get_balance(user_id):
    users = load_users()
    return users.get(str(user_id), {}).get("balance", 0)

def update_balance(user_id, amount):
    users = load_users()
    users[str(user_id)]["balance"] += amount
    save_users(users)

def mark_confirmed(user_id):
    users = load_users()
    users[str(user_id)]["confirmed"] = True
    save_users(users)

def is_admin(user_id):
    return user_id in ADMIN_IDS

def main_menu(user_id):
    buttons = [
        InlineKeyboardButton(text="üëõ –ö–æ—à–µ–ª–µ–∫", callback_data="wallet"),
        InlineKeyboardButton(text="üçë –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions"),
        InlineKeyboardButton(text="üî∑ P2P", callback_data="p2p"),
        InlineKeyboardButton(text="üìä –ë–∏—Ä–∂–∞", callback_data="exchange"),
        InlineKeyboardButton(text="ü¶ã –ß–µ–∫–∏", callback_data="checks"),
        InlineKeyboardButton(text="üìë –°—á–µ—Ç–∞", callback_data="bills"),
        InlineKeyboardButton(text="ü™ô Crypto Pay", callback_data="crypto_pay"),
        InlineKeyboardButton(text="üèÖ –ö–æ–Ω–∫—É—Ä—Å—ã", callback_data="contests"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
    ]
    if is_admin(int(user_id)):
        buttons.append(InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    inline = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(inline_keyboard=inline)

def wallet_menu():
    kb = [
        [
            InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="wallet_deposit"),
            InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏", callback_data="wallet_withdraw"),
        ],
        [InlineKeyboardButton(text="–ê–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞", callback_data="wallet_address_book")],
        [InlineKeyboardButton(text="–ö–æ–º–∏—Å—Å–∏–∏ –∏ –ª–∏–º–∏—Ç—ã", callback_data="wallet_fees")],
        [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="wallet_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    u = str(message.from_user.id)
    add_user(u)
    users = load_users()
    user = users.get(u)

    if user.get("confirmed"):
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω!", reply_markup=main_menu(u))
    else:
        kb = [[InlineKeyboardButton(text=name, url=link)] for link,name in channels_to_show]
        kb.append([InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="confirm_subs")])
        await message.answer("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 50$! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@dp.callback_query()
async def on_callback(callback: types.CallbackQuery):
    uid = str(callback.from_user.id)
    data = callback.data

    if data == "confirm_subs":
        udata = load_users().get(uid)
        if not udata["confirmed"]:
            update_balance(uid,60)
            mark_confirmed(uid)
            await callback.message.answer("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ—â—ë 60$", reply_markup=main_menu(uid))
        else:
            await callback.message.answer("–£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ")
        await callback.answer()

    elif data == "wallet":
        bal = get_balance(uid)
        await callback.message.answer(f"üëú –ë–∞–ª–∞–Ω—Å: {bal:.2f} USDT", reply_markup=wallet_menu())
        await callback.answer()

    elif data.startswith("wallet_"):
        text = {
            "wallet_deposit": "üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "wallet_withdraw": "üè¶ –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 150 USDT",
            "wallet_address_book": "üìí –ê–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞",
            "wallet_fees": "üíº –ö–æ–º–∏—Å—Å–∏—è: 1‚ÄØUSDT, –ª–∏–º–∏—Ç: 5000‚ÄØUSDT/–¥–µ–Ω—å",
            "wallet_back": f"üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        }[data]
        kb = main_menu(uid) if data=="wallet_back" else None
        await callback.message.answer(text, reply_markup=kb)
        await callback.answer()

    elif data == "admin_panel":
        if is_admin(callback.from_user.id):
            total = len(load_users())
            await callback.message.answer(f"üëë –ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å:\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
        else:
            await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    else:
        await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
